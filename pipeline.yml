AWSTemplateFormatVersion: "2010-09-09"
Description: CodePipeline for ECS Fargate Blue/Green Deployment (App artifacts come from S3)

Parameters:
  ProjectName:
    Type: String
  GitHubOwner:
    Type: String
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
    Default: main
  GitHubConnectionArn:
    Type: String
  ECRRepositoryName:
    Type: String
  ECRRepositoryUri:
    Type: String
  ClusterName:
    Type: String
  ServiceName:
    Type: String
  TargetGroupBlueArn:
    Type: String
  TargetGroupGreenArn:
    Type: String
  TargetGroupBlueName:
    Type: String
  TargetGroupGreenName:
    Type: String
  ALBListenerArn:
    Type: String
  ContainerName:
    Type: String
  ContainerPort:
    Type: Number
  TaskExecutionRoleArn:
    Type: String

Resources:
  # ----------------------------
  # S3 Bucket for Pipeline Artifacts
  # ----------------------------
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled

  # ----------------------------
  # Pipeline IAM Role
  # ----------------------------
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - iam:PassRole
                  - ecs:*
                  - codedeploy:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn

  # ----------------------------
  # CodeDeploy Application
  # ----------------------------
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${ProjectName}-codedeploy-app"
      ComputePlatform: ECS

  # ----------------------------
  # CodeDeploy Service Role
  # ----------------------------
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # ----------------------------
  # CodeDeploy Deployment Group
  # ----------------------------
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${ProjectName}-dg"
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      ECSServices:
        - ServiceName: !Ref ServiceName
          ClusterName: !Ref ClusterName
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref TargetGroupBlueName
              - Name: !Ref TargetGroupGreenName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListenerArn

  # ----------------------------
  # Pipeline
  # ----------------------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ProjectName}-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: appspec-artifact.zip # uploaded by GitHub Actions
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Deploy
          Actions:
            - Name: ECSBlueGreenDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                AppSpecTemplateArtifact: SourceOutput
                AppSpecTemplatePath: appspec.yml
                TaskDefinitionTemplateArtifact: SourceOutput
                TaskDefinitionTemplatePath: taskdef-rendered.json
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

Outputs:
  PipelineName:
    Value: !Ref Pipeline
  CodeDeployApplicationName:
    Value: !Ref CodeDeployApplication
  CodeDeployDeploymentGroupName:
    Value: !Ref CodeDeployDeploymentGroup
  ArtifactBucketName:
    Value: !Ref ArtifactBucket
